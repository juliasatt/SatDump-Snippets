{
  "cfg_list": {
    "prefix": "gcl",
    "body": [
      "nlohmann::ordered_json get_cfg_list()",
      "{",
      "\tnlohmann::ordered_json p;",
      "\tadd_param_${1:simple}(p, \"$2\", \"$3\");",
      "\t$0",
      "\treturn p;",
      "}"
    ],
    "description": "SatDump's get_cfg_list() snippet"
  },
  "get_cfg": {
    "prefix": "gcf",
    "body": [
      "nlohmann::json get_cfg(std::string key)",
      "{",
      "\tif (key == \"$1\")",
      "\t\treturn p_$1;",
      "\telse if (key == \"$2\")",
      "\t\treturn p_$2;",
      "\telse",
      "\t\tthrow satdump_exception(key);",
      "}"
    ],
    "description": "SatDump's get_cfg() snippet"
  },
  "set_cfg": {
    "prefix": "scf",
    "body": [
      "cfg_res_t set_cfg(std::string key, nlohmann::json v)",
      "{",
      "\tif (key == \"$1\")",
      "\t\tp_$1 = v;",
      "\telse if (key == \"$2\")",
      "\t\tp_$2 = v;$0",
      "\telse",
      "\t\tthrow satdump_exception(key);",
      "\treturn RES_OK;",
      "}"
    ],
    "description": "SatDump's set_cfg() snippet"
  },
  "add_param_simple": {
    "prefix": "aps",
    "body": ["add_param_simple(p, \"$1\", \"$2\");"],
    "description": "SatDump's Add Parameter Simple"
  },
  "simple_ndsp_block": {
    "prefix": "sndsp",
    "body": [
      "#pragma once",
      "",
      "#include \"common/dsp/complex.h\"",
      "#include \"dsp/block_simple.h\"",
      "#include <cstdint>",
      "",
      "namespace satdump",
      "{",
      "\tnamespace ndsp",
      "\t{",
      "\t\tclass ${1:Name}Block : public BlockSimple<${2:complex_t}, $2>",
      "\t\t{",
      "\t\tprivate:",
      "\t\t\t$3;",
      "",
      "\t\tpublic:",
      "\t\t\t$1Block();",
      "\t\t\t~$1Block();",
      "\t\t\tuint32_t process($2 *input, uint32_t nsamples, $2 *output);",
      "",
      "\t\t\tvoid init()",
      "\t\t\t{",
      "\t\t\t\t$4",
      "\t\t\t}",
      "",
      "\t\t\tnlohmann::json get_cfg(std::string key) { throw satdump_exception(key); }",
      "",
      "\t\t\tBlock::cfg_res_t set_cfg(std::string key, nlohmann::json v)",
      "\t\t\t{",
      "\t\t\t\tthrow satdump_exception(key);",
      "\t\t\t\treturn Block::RES_OK;",
      "\t\t\t}",
      "\t\t};",
      "\t} // namespace ndsp",
      "} // namespace satdump"
    ]
  }
}
